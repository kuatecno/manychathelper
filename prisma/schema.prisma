// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin model - administrators who manage Manychat accounts and create tools
model Admin {
  id              String    @id @default(cuid())
  username        String    @unique // Used in QR URLs (e.g., /qr/username/code)
  email           String    @unique
  password        String    // Hashed password
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  tools           Tool[]
}

// User model - stores Instagram users who connect via Manychat
model User {
  id              String    @id @default(cuid())
  manychatId      String    @unique // Manychat subscriber ID
  instagramId     String?   @unique
  firstName       String?
  lastName        String?
  timezone        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bookings        Booking[]
  qrCodes         QRCode[]
  conversations   Conversation[]
}

// Tool model - mini-applications users can access (QR generator, booking tool, forms, AI chat, etc.)
// For qr_generator type, config JSON structure:
// {
//   "qrAppearance": { "width": 300, "margin": 2, "errorCorrectionLevel": "H", "darkColor": "#000000", "lightColor": "#FFFFFF" },
//   "qrFormat": { "prefix": "QR", "includeUserId": true, "includeTimestamp": true, "includeRandom": true, "customFormat": "{PREFIX}-{USER_ID}-{TIMESTAMP}-{RANDOM}" },
//   "type": "promotion",
//   "expiresInDays": 30,
//   "defaultMetadata": { "campaign": "summer_sale" }
// }
// For ai_chat type, config JSON structure:
// {
//   "aiProvider": "openai",
//   "model": "gpt-4",
//   "apiKey": "sk-...",
//   "systemPrompt": "You are a helpful assistant...",
//   "temperature": 0.7,
//   "maxTokens": 500,
//   "conversationMemory": true
// }
model Tool {
  id              String    @id @default(cuid())
  adminId         String    // Admin who owns this tool
  name            String
  type            String    // "qr_generator", "booking", "form_builder", "event_rsvp", "poll", "waitlist", "ai_chat", "ai_image", "ai_assistant"
  description     String?
  active          Boolean   @default(true)
  config          String?   // JSON string for tool-specific configuration (see comments above)
  manychatFlowId  String?   // Optional Manychat flow integration ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  admin           Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  availabilities  Availability[]
  qrCodes         QRCode[]
  conversations   Conversation[]

  @@index([adminId])
}

// Availability slots for booking tool
model Availability {
  id              String    @id @default(cuid())
  toolId          String
  dayOfWeek       Int       // 0-6 (Sunday to Saturday)
  startTime       String    // "09:00"
  endTime         String    // "17:00"
  slotDuration    Int       @default(30) // minutes per slot
  active          Boolean   @default(true)

  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([toolId])
}

// Bookings created via booking tool
model Booking {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // References the booking tool used
  startTime       DateTime
  endTime         DateTime
  status          String    @default("pending") // pending, confirmed, cancelled, completed
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolId])
  @@index([startTime])
}

// QR Codes for promotions/validation
model QRCode {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // Which tool/campaign generated this QR
  code            String    @unique // The actual QR code data
  type            String    // "promotion", "validation", "discount"
  metadata        String?   // JSON string for flexible data
  expiresAt       DateTime?
  scannedAt       DateTime?
  scannedBy       String?   // Who scanned it
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolId])
  @@index([code])
}

// Conversation - stores AI chat conversations per user and tool
model Conversation {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // Which AI tool this conversation belongs to
  title           String?   // Optional conversation title
  active          Boolean   @default(true)
  metadata        String?   // JSON string for additional context
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)
  messages        AIMessage[]

  @@index([userId])
  @@index([toolId])
  @@index([active])
}

// AIMessage - individual messages in a conversation
model AIMessage {
  id              String    @id @default(cuid())
  conversationId  String
  role            String    // "user", "assistant", "system"
  content         String    @db.Text // Message content
  tokens          Int?      // Token count for this message
  metadata        String?   // JSON string for additional data
  createdAt       DateTime  @default(now())

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

