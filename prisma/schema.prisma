// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin model - administrators who manage Manychat accounts and create tools
model Admin {
  id              String    @id @default(cuid())
  username        String    @unique // Used in QR URLs (e.g., /qr/username/code)
  email           String    @unique
  password        String    // Hashed password
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  tools           Tool[]
  manychatConfig  ManychatConfig?
  tags            Tag[]
  customFields    CustomField[]
}

// User model - stores Instagram users who connect via Manychat
model User {
  id              String    @id @default(cuid())
  manychatId      String    @unique // Manychat subscriber ID
  instagramId     String?   @unique
  igUsername      String?   // Instagram username (e.g., @username)
  firstName       String?
  lastName        String?
  email           String?
  phone           String?
  whatsappPhone   String?
  gender          String?
  locale          String?
  timezone        String?
  profilePic      String?
  optedInMessenger Boolean  @default(false)
  optedInInstagram Boolean  @default(false)
  optedInWhatsapp  Boolean  @default(false)
  optedInTelegram  Boolean  @default(false)
  subscribedAt    DateTime?
  lastTextInput   String?
  lastSyncedAt    DateTime? // Track when data was last synced from Manychat
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bookings        Booking[]
  qrCodes         QRCode[]
  conversations   Conversation[]
  customFieldValues CustomFieldValue[]
  contactTags     ContactTag[]
  interactionHistory InteractionHistory[]
  snapshots       UserSnapshot[]
}

// Tool model - mini-applications users can access (QR generator, booking tool, forms, AI chat, etc.)
// For qr_generator type, config JSON structure:
// {
//   "qrAppearance": { "width": 300, "margin": 2, "errorCorrectionLevel": "H", "darkColor": "#000000", "lightColor": "#FFFFFF" },
//   "qrFormat": { "prefix": "QR", "includeUserId": true, "includeTimestamp": true, "includeRandom": true, "customFormat": "{PREFIX}-{USER_ID}-{TIMESTAMP}-{RANDOM}" },
//   "type": "promotion",
//   "expiresInDays": 30,
//   "defaultMetadata": { "campaign": "summer_sale" }
// }
// For ai_chat type, config JSON structure:
// {
//   "aiProvider": "openai",
//   "model": "gpt-4",
//   "apiKey": "sk-...",
//   "systemPrompt": "You are a helpful assistant...",
//   "temperature": 0.7,
//   "maxTokens": 500,
//   "conversationMemory": true
// }
model Tool {
  id              String    @id @default(cuid())
  adminId         String    // Admin who owns this tool
  name            String
  type            String    // "qr_generator", "booking", "form_builder", "event_rsvp", "poll", "waitlist", "ai_chat", "ai_image", "ai_assistant"
  description     String?
  active          Boolean   @default(true)
  config          String?   // JSON string for tool-specific configuration (see comments above)
  manychatFlowId  String?   // Optional Manychat flow integration ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  admin           Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  availabilities  Availability[]
  qrCodes         QRCode[]
  conversations   Conversation[]

  @@index([adminId])
}

// Availability slots for booking tool
model Availability {
  id              String    @id @default(cuid())
  toolId          String
  dayOfWeek       Int       // 0-6 (Sunday to Saturday)
  startTime       String    // "09:00"
  endTime         String    // "17:00"
  slotDuration    Int       @default(30) // minutes per slot
  active          Boolean   @default(true)

  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([toolId])
}

// Bookings created via booking tool
model Booking {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // References the booking tool used
  startTime       DateTime
  endTime         DateTime
  status          String    @default("pending") // pending, confirmed, cancelled, completed
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolId])
  @@index([startTime])
}

// QR Codes for promotions/validation
model QRCode {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // Which tool/campaign generated this QR
  code            String    @unique // The actual QR code data
  type            String    // "promotion", "validation", "discount"
  metadata        String?   // JSON string for flexible data
  expiresAt       DateTime?
  scannedAt       DateTime?
  scannedBy       String?   // Who scanned it
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolId])
  @@index([code])
}

// Conversation - stores AI chat conversations per user and tool
model Conversation {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // Which AI tool this conversation belongs to
  title           String?   // Optional conversation title
  active          Boolean   @default(true)
  metadata        String?   // JSON string for additional context
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)
  messages        AIMessage[]

  @@index([userId])
  @@index([toolId])
  @@index([active])
}

// AIMessage - individual messages in a conversation
model AIMessage {
  id              String    @id @default(cuid())
  conversationId  String
  role            String    // "user", "assistant", "system"
  content         String    @db.Text // Message content
  tokens          Int?      // Token count for this message
  metadata        String?   // JSON string for additional data
  createdAt       DateTime  @default(now())

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

// ManychatConfig - stores Manychat API credentials per admin
model ManychatConfig {
  id              String    @id @default(cuid())
  adminId         String    @unique
  apiToken        String    // Encrypted API token
  pageId          String?   // Manychat page ID
  active          Boolean   @default(true)
  lastSyncedAt    DateTime?
  syncEnabled     Boolean   @default(true)
  webhookSecret   String?   // For validating webhook calls
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  admin           Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  syncLogs        SyncLog[]

  @@index([adminId])
}

// Tag - stores Manychat tags for contact segmentation
model Tag {
  id              String    @id @default(cuid())
  adminId         String
  manychatTagId   String    // Manychat's tag ID
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  admin           Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  contactTags     ContactTag[]

  @@unique([adminId, manychatTagId])
  @@index([adminId])
}

// ContactTag - junction table for user-tag relationships
model ContactTag {
  id              String    @id @default(cuid())
  userId          String
  tagId           String
  appliedAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag             Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@index([userId])
  @@index([tagId])
}

// CustomField - stores custom field definitions from Manychat
model CustomField {
  id              String    @id @default(cuid())
  adminId         String
  manychatFieldId String    // Manychat's field ID
  name            String
  type            String    // "text", "number", "date", "datetime", "boolean", "array"
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  admin           Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  fieldValues     CustomFieldValue[]

  @@unique([adminId, manychatFieldId])
  @@index([adminId])
}

// CustomFieldValue - stores custom field values per user
model CustomFieldValue {
  id              String    @id @default(cuid())
  userId          String
  fieldId         String
  value           String?   @db.Text // Store all types as text, parse based on field.type
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  field           CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([userId, fieldId])
  @@index([userId])
  @@index([fieldId])
}

// SyncLog - tracks sync operations and errors
model SyncLog {
  id              String    @id @default(cuid())
  configId        String
  syncType        String    // "full", "incremental", "webhook", "manual"
  status          String    // "pending", "in_progress", "completed", "failed"
  recordsSynced   Int       @default(0)
  recordsFailed   Int       @default(0)
  errorMessage    String?   @db.Text
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  metadata        String?   // JSON for additional context

  config          ManychatConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([startedAt])
  @@index([status])
}

// InteractionHistory - tracks user interaction counts over time
model InteractionHistory {
  id              String    @id @default(cuid())
  userId          String
  date            DateTime  @default(now()) // Date of snapshot
  messagesCount   Int       @default(0)     // messagescountinsta
  commentsCount   Int       @default(0)     // commentcountinsta
  storiesCount    Int       @default(0)     // storiescountinsta
  totalCount      Int       @default(0)     // Sum of all interactions
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([createdAt])
}

// UserSnapshot - tracks all user data changes over time
model UserSnapshot {
  id              String    @id @default(cuid())
  userId          String
  firstName       String?
  lastName        String?
  igUsername      String?
  email           String?
  phone           String?
  whatsappPhone   String?
  timezone        String?
  profilePic      String?
  customFieldsData String?  @db.Text // JSON snapshot of all custom fields
  tagsData        String?   @db.Text // JSON snapshot of all tags
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

