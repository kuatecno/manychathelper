// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores Instagram users who connect via Manychat
model User {
  id              String    @id @default(cuid())
  manychatId      String    @unique // Manychat subscriber ID
  instagramId     String?   @unique
  firstName       String?
  lastName        String?
  timezone        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bookings        Booking[]
  qrCodes         QRCode[]
}

// Tool model - mini-applications users can access (QR generator, booking tool, forms, etc.)
model Tool {
  id              String    @id @default(cuid())
  name            String
  type            String    // "qr_generator", "booking", "form_builder", "event_rsvp", "poll", "waitlist"
  description     String?
  active          Boolean   @default(true)
  config          String?   // JSON string for tool-specific configuration
  manychatFlowId  String?   // Optional Manychat flow integration ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bookings        Booking[]
  availabilities  Availability[]
}

// Availability slots for booking tool
model Availability {
  id              String    @id @default(cuid())
  toolId          String
  dayOfWeek       Int       // 0-6 (Sunday to Saturday)
  startTime       String    // "09:00"
  endTime         String    // "17:00"
  slotDuration    Int       @default(30) // minutes per slot
  active          Boolean   @default(true)

  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([toolId])
}

// Bookings created via booking tool
model Booking {
  id              String    @id @default(cuid())
  userId          String
  toolId          String    // References the booking tool used
  startTime       DateTime
  endTime         DateTime
  status          String    @default("pending") // pending, confirmed, cancelled, completed
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool            Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolId])
  @@index([startTime])
}

// QR Codes for promotions/validation
model QRCode {
  id              String    @id @default(cuid())
  userId          String
  code            String    @unique // The actual QR code data
  type            String    // "promotion", "validation", "discount"
  metadata        String?   // JSON string for flexible data
  expiresAt       DateTime?
  scannedAt       DateTime?
  scannedBy       String?   // Who scanned it
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
}

// System Settings
model Settings {
  id              String    @id @default(cuid())
  key             String    @unique // "qr_appearance", "qr_format"
  value           String    // JSON string
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
}
